PROBLEM STATEMENT:

Median of two sorted arrays: There are 2 sorted arrays A and B; each of size n. Write an algorithm to find the median of the array obtained after merging the above 2 arrays (i.e. array of length 2n). The complexity should be O(log(n))

ALGORITHM:
Suppose we use function median(int A[], int B[], int n).


For example, if n = 7, then n/2 = 3, m1 = A[3] and m2 = B[3]. So we reject: 3 elements in A[] from index 4 to 6 and 3 elements in B[] from index 0 to 2. Remaining size of array A and B = n - n/2 = 7 - 3 = 4.


CODE:

#include <stdio.h>
int max(int num1, int num2); int min(int num1, int num2) ; #include <stdio.h>
double median(int arr[], int size)
{
if (size % 2 == 0)
return (arr[size / 2] + arr[size / 2 - 1]) / 2;
 
else

}
 

return arr[size / 2];
 

int calculateMedian(int arr1[], int arr2[], int size)
{
if (size <= 0) return -1;
if (size == 1)
return (arr1[0] + arr2[0]) / 2; if (size == 2)
return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2;

double m1 = 0; double m2 = 0;

m1 = median(arr1, size); m2 = median(arr2, size);

if (m1 == m2)
return m1;

if (m1 < m2) {
if (size % 2 == 0)
return calculateMedian(arr1 + size / 2 - 1, arr2, size - size / 2 + 1);

return calculateMedian(arr1 + size / 2, arr2, size - size / 2);
}

if (size % 2 == 0)
return calculateMedian(arr2 + size / 2 - 1, arr1, size - size /
2 + 1);

return calculateMedian(arr2 + size / 2, arr1, size - size / 2);
 
}
int max(int num1, int num2)
{
return (num1 > num2 ) ? num1 : num2;
}
int min(int num1, int num2)
{
return (num1 > num2 ) ? num2 : num1;
}
int main()
{
int arr1[] = { 10, 11, 12, 13, 14 };
int arr2[] = { 20, 22, 23, 24, 25 };

int size1 = sizeof(arr1) / sizeof(arr1[0]); int size2 = sizeof(arr2) / sizeof(arr2[0]);

if (size1 != size2) {
printf("Size of both arrays are different\n"); return 0;
}

printf("Median is: %d\n", calculateMedian(arr1, arr2, size1));

return 0;
}
