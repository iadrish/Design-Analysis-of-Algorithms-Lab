PROBLEM STATEMENT:
Find neighbors of the median element in an array using partitioning strategy of Quick-Sorting method. 
ALGORITHM:
1. PARTITION (array A, start, end) 
2. { 
3. 1 pivot ? A[end]
 4. 2 i ? start-1 
5. 3 for j ? start to end -1 { 
6. 4 do if (A[j] < pivot) { 
7.5 then i ? i + 1 
8. 6 swap A[i] with A[j] 
9. 7 }} 
10. 8 swap A[i+1] with A[end] 
11. 9 return i+1 
12. }
CODE:
#include <bits/stdc++.h>
using namespace std;
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int low, int high)
{
    int pivot = arr[high]; 
    int i = (low - 1); 
 
    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++; 
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}
int main()
{
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);
    cout << "Sorted array: \n";
    printArray(arr, n);
    return 0;
}
